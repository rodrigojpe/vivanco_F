{"remainingRequest":"/Users/rodrigojeldes/Desktop/curso-production-means/client_dev/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/rodrigojeldes/Desktop/curso-production-means/client_dev/node_modules/ngx-youtube-player/esm5/ngx-youtube-player.js","dependencies":[{"path":"/Users/rodrigojeldes/Desktop/curso-production-means/client_dev/node_modules/ngx-youtube-player/esm5/ngx-youtube-player.js","mtime":1527669619000},{"path":"/Users/rodrigojeldes/Desktop/curso-production-means/client_dev/node_modules/cache-loader/dist/cjs.js","mtime":1531520968222},{"path":"/Users/rodrigojeldes/Desktop/curso-production-means/client_dev/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license ngx-youtube-library\n * Copyright (c) 2018 Oren Farhi\n * MIT license\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n */\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, Renderer2 } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { __assign } from 'tslib';\nimport { ReplaySubject } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction win() {\n    return window;\n}\n/**\n * @return {?}\n */\nfunction YouTubeRef() {\n    return win()['YT'];\n}\n/**\n * @return {?}\n */\nfunction YouTubePlayerRef() {\n    return YouTubeRef().Player;\n}\nvar defaultSizes = {\n    height: 270,\n    width: 367\n};\nvar YoutubePlayerService = /** @class */ /*@__PURE__*/ (function () {\n    function YoutubePlayerService(zone) {\n        this.zone = zone;\n        this.ytApiLoaded = false;\n        this.api = new ReplaySubject(1);\n        this.createApi();\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.loadPlayerApi = /**\n     * @param {?} options\n     * @return {?}\n     */\n        function (options) {\n            var /** @type {?} */ doc = win().document;\n            if (!this.ytApiLoaded) {\n                this.ytApiLoaded = true;\n                var /** @type {?} */ playerApiScript = doc.createElement('script');\n                playerApiScript.type = 'text/javascript';\n                playerApiScript.src = options.protocol + \"://www.youtube.com/iframe_api\";\n                doc.body.appendChild(playerApiScript);\n            }\n        };\n    /**\n     * @param {?} elementId\n     * @param {?} outputs\n     * @param {?} sizes\n     * @param {?=} videoId\n     * @param {?=} playerVars\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.setupPlayer = /**\n     * @param {?} elementId\n     * @param {?} outputs\n     * @param {?} sizes\n     * @param {?=} videoId\n     * @param {?=} playerVars\n     * @return {?}\n     */\n        function (elementId, outputs, sizes, videoId, playerVars) {\n            var _this = this;\n            if (videoId === void 0) {\n                videoId = '';\n            }\n            var /** @type {?} */ createPlayer = function () {\n                if (YouTubePlayerRef) {\n                    _this.createPlayer(elementId, outputs, sizes, videoId, playerVars);\n                }\n            };\n            this.api.subscribe(createPlayer);\n        };\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.play = /**\n     * @param {?} player\n     * @return {?}\n     */\n        function (player) {\n            player.playVideo();\n        };\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.pause = /**\n     * @param {?} player\n     * @return {?}\n     */\n        function (player) {\n            player.pauseVideo();\n        };\n    /**\n     * @param {?} media\n     * @param {?} player\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.playVideo = /**\n     * @param {?} media\n     * @param {?} player\n     * @return {?}\n     */\n        function (media, player) {\n            var /** @type {?} */ id = media.id.videoId ? media.id.videoId : media.id;\n            player.loadVideoById(id);\n            this.play(player);\n        };\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.isPlaying = /**\n     * @param {?} player\n     * @return {?}\n     */\n        function (player) {\n            // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING\n            var /** @type {?} */ isPlayerReady = player && player.getPlayerState;\n            var /** @type {?} */ playerState = isPlayerReady ? player.getPlayerState() : {};\n            var /** @type {?} */ isPlayerPlaying = isPlayerReady\n                ? playerState !== YouTubeRef().PlayerState.ENDED &&\n                    playerState !== YouTubeRef().PlayerState.PAUSED\n                : false;\n            return isPlayerPlaying;\n        };\n    /**\n     * @param {?} elementId\n     * @param {?} outputs\n     * @param {?} sizes\n     * @param {?=} videoId\n     * @param {?=} playerVars\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.createPlayer = /**\n     * @param {?} elementId\n     * @param {?} outputs\n     * @param {?} sizes\n     * @param {?=} videoId\n     * @param {?=} playerVars\n     * @return {?}\n     */\n        function (elementId, outputs, sizes, videoId, playerVars) {\n            var _this = this;\n            if (videoId === void 0) {\n                videoId = '';\n            }\n            if (playerVars === void 0) {\n                playerVars = {};\n            }\n            var /** @type {?} */ playerSize = {\n                height: sizes.height || defaultSizes.height,\n                width: sizes.width || defaultSizes.width\n            };\n            var /** @type {?} */ ytPlayer = YouTubePlayerRef();\n            return new ytPlayer(elementId, __assign({}, playerSize, { events: {\n                    onReady: function (ev) {\n                        _this.zone.run(function () { return outputs.ready && outputs.ready.next(ev.target); });\n                    },\n                    onStateChange: function (ev) {\n                        _this.zone.run(function () { return outputs.change && outputs.change.next(ev); });\n                    }\n                }, playerVars: playerVars,\n                videoId: videoId }));\n        };\n    /**\n     * @param {?} player\n     * @param {?} isFullScreen\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.toggleFullScreen = /**\n     * @param {?} player\n     * @param {?} isFullScreen\n     * @return {?}\n     */\n        function (player, isFullScreen) {\n            var height = defaultSizes.height, width = defaultSizes.width;\n            if (!isFullScreen) {\n                height = window.innerHeight;\n                width = window.innerWidth;\n            }\n            player.setSize(width, height);\n        };\n    // adpoted from uid\n    /**\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.generateUniqueId = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ len = 7;\n            return Math.random()\n                .toString(35)\n                .substr(2, len);\n        };\n    /**\n     * @return {?}\n     */\n    YoutubePlayerService.prototype.createApi = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ onYouTubeIframeAPIReady = function () {\n                if (win()) {\n                    _this.api.next(YouTubeRef());\n                }\n            };\n            win()['onYouTubeIframeAPIReady'] = onYouTubeIframeAPIReady;\n        };\n    return YoutubePlayerService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar YoutubePlayerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function YoutubePlayerComponent(playerService, elementRef, renderer) {\n        this.playerService = playerService;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.videoId = '';\n        this.height = defaultSizes.height;\n        this.width = defaultSizes.width;\n        /**\n         * \\@description sets the protocol by the navigator object\n         * if there is no window, it sets a default http protocol\n         * unless the protocol is set from outside\n         */\n        this.protocol = this.getProtocol();\n        this.playerVars = {};\n        // player created and initialized - sends instance of the player\n        this.ready = new EventEmitter();\n        // state change: send the YT event with its state\n        this.change = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    YoutubePlayerComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ htmlId = this.playerService.generateUniqueId();\n            var /** @type {?} */ playerSize = { height: this.height, width: this.width };\n            var /** @type {?} */ container = this.renderer.selectRootElement('#yt-player-ngx-component');\n            this.renderer.setAttribute(container, 'id', htmlId);\n            this.playerService.loadPlayerApi({\n                protocol: this.protocol\n            });\n            this.playerService.setupPlayer(htmlId, {\n                change: this.change,\n                ready: this.ready\n            }, playerSize, this.videoId, this.playerVars);\n        };\n    /**\n     * @return {?}\n     */\n    YoutubePlayerComponent.prototype.getProtocol = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ hasWindow = window && window.location;\n            var /** @type {?} */ protocol = hasWindow\n                ? window.location.protocol.replace(':', '')\n                : 'http';\n            return protocol;\n        };\n    return YoutubePlayerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar YoutubePlayerModule = /** @class */ /*@__PURE__*/ (function () {\n    function YoutubePlayerModule() {\n    }\n    return YoutubePlayerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Copyright Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { YoutubePlayerModule, YoutubePlayerComponent as ɵa, YoutubePlayerService as ɵb };\n//# sourceMappingURL=ngx-youtube-player.js.map\n",null]}